package de.emir.model.application.sense;

import de.emir.model.application.sense.Observation;
import de.emir.model.application.sense.SensorPort;
import java.util.List;

import de.emir.model.universal.physics.PhysicalObject;
import de.emir.tuml.ucore.runtime.annotations.UMLClass;
import de.emir.tuml.ucore.runtime.annotations.UMLProperty;
import de.emir.tuml.ucore.runtime.annotations.UMLProperty.AssociationType;

/**

 * A sensor can do (implements) sensing: that is, a sensor is any entity that can follow a sensing method and thus observe some Property of a FeatureOfInterest. Sensors may be physical devices, computational methods, a laboratory setup with a person following a method, or any other thing that can follow a Sensing Method to observe a Property.
 * [SSN]
 * 
 * @generated 
 */
@UMLClass(parent = PhysicalObject.class)	
public interface Sensor extends PhysicalObject 
{
	/**
	 Ports (measurements) generated by this sensor 
	 * @note to observe the occurence of new measurements, put a listener to the port (@see Port)
	 * 
	 * @generated 
	 */
	@UMLProperty(name = "ports", associationType = AssociationType.COMPOSITE)
	public List<SensorPort> getPorts();
	/**
	
	 * Only if the sensor is active, it will take measurements, with the 
	 * frequency defined with the attribute frequency
	 * @generated 
	 */
	@UMLProperty(name = "active", associationType = AssociationType.PROPERTY)
	public void setActive(boolean _active);
	/**
	
	 * Only if the sensor is active, it will take measurements, with the 
	 * frequency defined with the attribute frequency
	 * @generated 
	 */
	@UMLProperty(name = "active", associationType = AssociationType.PROPERTY)
	public boolean getActive();
	/**
	
	 * The frequency in Hz, that is used to take measurements
	 * @generated 
	 */
	@UMLProperty(name = "frequency", associationType = AssociationType.PROPERTY)
	public void setFrequency(int _frequency);
	/**
	
	 * The frequency in Hz, that is used to take measurements
	 * @generated 
	 */
	@UMLProperty(name = "frequency", associationType = AssociationType.PROPERTY)
	public int getFrequency();

	
	/**
	 returns a list of all ports of this sensor 
	 * @generated 
	 */
	List<SensorPort> getAllPorts();
	/**
	 returns an observation that contains the measurments of all ports 
	 * @generated 
	 */
	Observation getObservation();
	
}
