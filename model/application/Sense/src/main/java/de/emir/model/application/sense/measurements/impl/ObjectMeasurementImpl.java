package de.emir.model.application.sense.measurements.impl;

import de.emir.model.application.sense.SensorPort;
import de.emir.model.application.sense.impl.MeasurementImpl;
import de.emir.model.application.sense.measurements.MeasurementsPackage;
import de.emir.model.application.sense.measurements.ObjectMeasurement;
import de.emir.model.universal.core.IdentifiedObject;
import de.emir.model.universal.units.Time;
import de.emir.tuml.ucore.runtime.Notification;
import de.emir.tuml.ucore.runtime.UClass;
import de.emir.tuml.ucore.runtime.annotations.UMLImplementation;
import de.emir.tuml.ucore.runtime.NotificationType;


/**
 The position Measurement differs from the LocationMeasurement in that form, that it measures the position
 * of an external object. Within the maritime domain such a measurement may be generated by an AIS sensor but also 
 * by an Radar (reasoned from the own position of the radar and a DistanceMeasurement) 
 * @generated 
 */
@UMLImplementation(classifier = ObjectMeasurement.class)
public class ObjectMeasurementImpl extends MeasurementImpl implements ObjectMeasurement  
{
	
	
	/**
	 *	@generated 
	 */
	private IdentifiedObject mObject = null;
			
	/**
	 *	Default constructor
	 *	@generated
	 */
	public ObjectMeasurementImpl(){
		super();
		//set the default values and assign them to this instance 
		setObject(mObject);
	}

	/**
	 *	Default copy constructor
	 *	@generated
	 */
	public ObjectMeasurementImpl(final ObjectMeasurement _copy) {
		super(_copy);
		mObject = _copy.getObject();
	}
	
	/**
	 *	Default attribute constructor
	 *	@generated
	 */
	public ObjectMeasurementImpl(Time _timestamp, SensorPort _sender, IdentifiedObject _object) {
		super(_timestamp,_sender);
		mObject = _object; 
	}
	
	/**
	 * @generated
	 */
	public UClass getUClassifier() {
		return MeasurementsPackage.Literals.ObjectMeasurement;
	}

	/**
	 *	@generated 
	 */
	public void setObject(IdentifiedObject _object) {
		Notification<IdentifiedObject> notification = basicSet(mObject, _object, MeasurementsPackage.Literals.ObjectMeasurement_object);
		mObject = _object;
		if (notification != null){
			dispatchNotification(notification);
		}
	}

	/**
	 *	@generated 
	 */
	public IdentifiedObject getObject() {
		return mObject;
	}

	/**
	* @generated
	*/
	@Override
	public String toString() {
		return "ObjectMeasurementImpl{" +
		"}";
	}
}
