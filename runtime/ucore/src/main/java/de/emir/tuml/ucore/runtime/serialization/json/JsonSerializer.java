package de.emir.tuml.ucore.runtime.serialization.json;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.json.JSONObject;
import org.json.JSONTokener;
import org.json.XML;

import de.emir.tuml.ucore.runtime.UObject;
import de.emir.tuml.ucore.runtime.logging.ULog;
import de.emir.tuml.ucore.runtime.serialization.AbstractSerializer;
import de.emir.tuml.ucore.runtime.serialization.ISerializer;
import de.emir.tuml.ucore.runtime.serialization.xml.XMLSerializer;

/**
 * This serializer uses the structure generated by XMLSerializer and transforms to output to a json document.
 * @author Stefan Behrensen <stefan.behrensen@dlr.de>
 *
 */
public class JsonSerializer extends AbstractSerializer implements ISerializer
{
	/** if set to true, the serializer accepts missing references, e.g. ClassNotFoundExceptions if a model has not been loaded.
	 * @note this option is disabled by defeault as the resulting object may not be the same as the serialized object -> use with caution
	 */
	private boolean mAcceptMissingReferences = false; 
	public void setAcceptMissingReferences(boolean b) { mAcceptMissingReferences = b; }
	public boolean isAcceptMissingReferencesEnabled() { return mAcceptMissingReferences; }
	
	
	public String serialize(UObject instance){
		try {
			return XML.toJSONObject(new XMLSerializer().serialize(instance)).toString();
		} catch (Exception e) {
			ULog.error(e);
		}
		return null;
	}
	
	@Override
	public void serialize(UObject instance, OutputStream stream) {
		try {
			PrintStream printStream = new PrintStream(stream);
			printStream.print(XML.toJSONObject(new XMLSerializer().serialize(instance)).toString(4));
			printStream.close();
		} catch (Exception e) {
			ULog.error(e);
		}
	}

	@Override
	public UObject deserialize(InputStream stream) {
		throw new java.lang.UnsupportedOperationException("Not supported yet.");
		/*UObject result = null;
		try {
			JSONTokener tokener = new JSONTokener(stream);
	        JSONObject object = new JSONObject(tokener);
			XMLSerializer xmlser = new XMLSerializer();
			xmlser.setAcceptMissingReferences(mAcceptMissingReferences);
			
			String str = XML.toString(object);
			result = xmlser.deserialize(new ByteArrayInputStream(str.getBytes()));
			return result;
		} catch(Exception e){
			e.printStackTrace();
			return null;
		}*/
	}

}
